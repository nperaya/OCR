import easyocr
import cv2
import numpy as np
import re
import os
import matplotlib.pyplot as plt

# === CONFIG ===
image_path = r"C:\Users\PC\Desktop\trainee\pic\pic3.jpg"
output_txt_path = r"C:\Users\PC\Desktop\trainee\output.txt"

# === ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û ===
image = cv2.imread(image_path)

# === Grayscale ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Contrast ===
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
equalized = cv2.equalizeHist(gray)
enhanced = cv2.convertScaleAbs(equalized, alpha=1.5, beta=0)

# ‡πÉ‡∏ä‡πâ Adaptive Thresholding
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                       cv2.THRESH_BINARY, 35, 35)




# === ‡πÅ‡∏õ‡∏•‡∏á adaptive_thresh ‡πÄ‡∏õ‡πá‡∏ô BGR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EasyOCR ===
adaptive_bgr = cv2.cvtColor(adaptive_thresh, cv2.COLOR_GRAY2BGR)

# === OCR ‡∏î‡πâ‡∏ß‡∏¢ EasyOCR ‡∏ö‡∏ô adaptive_thresh ===
reader = easyocr.Reader(['en'])
results = reader.readtext(
    adaptive_bgr,
    detail=1,
    paragraph=False,
    text_threshold=0.5,
    low_text=0.3,
    link_threshold=0.5
)

# === ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á ===
# ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å OCR
for result in results:
    text = result[1]
    box = result[0]
    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ó‡∏µ‡πà OCR ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    cv2.polylines(image, [np.int32(box)], isClosed=True, color=(0, 255, 0), thickness=2)
    # ‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏†‡∏≤‡∏û
    cv2.putText(image, text, (int(box[0][0]), int(box[0][1] - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

# === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===
plt.figure(figsize=(12, 12))

# ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Image after EasyOCR')
plt.axis('off')

# ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á Adaptive Thresholding
plt.subplot(1, 2, 2)
plt.imshow(adaptive_thresh, cmap='gray')
plt.title('Image after Adaptive Thresholding')
plt.axis('off')

plt.show()

# === ‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î OCR ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ ===
def clean_text(text):
    text = text.upper()
    text = text.replace('|', '1')
    text = text.replace('||', '11')
    text = text.replace('Ob', '06').replace('0b', '06').replace('OB', '06').replace('0B', '06')
    text = text.replace('O|', '01').replace('OE', '01').replace('0L', '01')
    text = text.replace('O ', '0').replace('O', '0')
    text = text.replace('Oq', '09').replace('OQ', '09').replace('0q', '09').replace('0Q', '09')
    text = text.replace('TRAI', 'TRAY').replace('TRAIY', 'TRAY').replace('TRQY', 'TRAY')
    return text.strip()



# === ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á ===
results_sorted = sorted(results, key=lambda r: min(pt[1] for pt in r[0]))

# === ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤ match ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===
# === Clean ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ===
pattern = r'LINE\s+\d+\s+STACK\s+\d+\s+TRAY\s+\d+'
cleaned_lines = []

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà clean ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
cleaned_texts = [clean_text(text) for (_, text, _) in results_sorted]

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏∞ 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
i = 0
used_indices = set()
while i < len(cleaned_texts) - 2:
    line1 = cleaned_texts[i].strip()
    line2 = cleaned_texts[i+1].strip()
    line3 = cleaned_texts[i+2].strip()
    
    # Case 1: ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    combined = f"{line2} {line1} {line3}".strip()
    match = re.search(pattern, combined)
    if match:
        cleaned_lines.append(match.group())
        used_indices.update([i, i+1, i+2])
        i += 3
        continue

    # Case 2: TRAY ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏Ç tray ‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if line1.startswith("TRAY") and re.match(r'^LINE[:\s]\s*\d+\s+STACK\s+\d+$', line2, re.IGNORECASE) and line3.isdigit():
        # Clean LINE: -> LINE
        line2_fixed = line2.replace(":", "")
        combined2 = f"{line2_fixed} TRAY {line3}"
        match2 = re.search(pattern, combined2)
        if match2:
            cleaned_lines.append(match2.group())
            used_indices.update([i, i+1, i+2])
            i += 3
            continue

    i += 1

# === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ ===
for j in range(len(cleaned_texts)):
    if j not in used_indices:
        cleaned_lines.append(cleaned_texts[j])


# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
full_text_crlf = '\r\n'.join(cleaned_lines)
with open(output_txt_path, 'w', encoding='utf-8', newline='\r\n') as f:
    f.write(full_text_crlf)

print("‚úÖ save text at:", output_txt_path)
print("üìã text:\n")
print(full_text_crlf)

